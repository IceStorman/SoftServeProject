"""created new table

Revision ID: 410e5fdf3a6e
Revises: 42e239ddb722
Create Date: 2025-02-05 18:09:17.282936

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '410e5fdf3a6e'
down_revision: Union[str, None] = '42e239ddb722'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Token_Blocklist',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('jti', sa.String(length=36), nullable=False),
    sa.Column('token_type', sa.String(length=10), nullable=False),
    sa.Column('revoked', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Token_Blocklist_jti'), 'Token_Blocklist', ['jti'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_Token_Blocklist_jti'), table_name='Token_Blocklist')
    op.drop_table('Token_Blocklist')
    # ### end Alembic commands ###


    # op.execute("""
    # CREATE OR REPLACE FUNCTION set_initial_status()
    # RETURNS TRIGGER AS $$
    # BEGIN
    #     INSERT INTO Streams_Status (stream_id, status_id)
    #     VALUES (NEW.stream_id, 0);
    #     RETURN NEW;
    # END;
    # $$ LANGUAGE plpgsql;

    # CREATE TRIGGER set_initial_status_trigger
    # AFTER INSERT ON Streams
    # FOR EACH ROW
    # EXECUTE FUNCTION set_initial_status();
    # """)

    # op.execute("""
    # CREATE OR REPLACE FUNCTION update_status_on_start()
    # RETURNS TRIGGER AS $$
    # BEGIN
    #     IF NEW.start_time <= EXTRACT(EPOCH FROM NOW()) AND
    #        (SELECT status_id FROM Streams_Status WHERE stream_id = NEW.stream_id ORDER BY status_id DESC LIMIT 1) = 0 THEN
    #         UPDATE Streams_Status
    #         SET status_id = 1
    #         WHERE stream_id = NEW.stream_id;
    #     END IF;
    #     RETURN NEW;
    # END;
    # $$ LANGUAGE plpgsql;

    # CREATE TRIGGER update_status_on_start_trigger
    # AFTER UPDATE OF start_time ON Streams
    # FOR EACH ROW
    # EXECUTE FUNCTION update_status_on_start();
    # """)

    # op.execute("""
    # CREATE OR REPLACE FUNCTION update_status_on_end()
    # RETURNS TRIGGER AS $$
    # BEGIN
    #     IF NEW.start_time + (90 * 60) <= EXTRACT(EPOCH FROM NOW()) AND
    #        (SELECT status_id FROM Streams_Status WHERE stream_id = NEW.stream_id ORDER BY status_id DESC LIMIT 1) = 1 THEN
    #         UPDATE Streams_Status
    #         SET status_id = 2
    #         WHERE stream_id = NEW.stream_id;
    #     END IF;
    #     RETURN NEW;
    # END;
    # $$ LANGUAGE plpgsql;

    # CREATE TRIGGER update_status_on_end_trigger
    # AFTER UPDATE OF start_time ON Streams
    # FOR EACH ROW
    # EXECUTE FUNCTION update_status_on_end();
    # """)

    # op.execute("""
    # CREATE OR REPLACE FUNCTION delete_old_streams()
    # RETURNS TRIGGER AS $$
    # BEGIN
    #     DELETE FROM Streams_Status
    #     WHERE stream_id = OLD.stream_id;

    #     DELETE FROM Streams
    #     WHERE stream_id = OLD.stream_id;

    #     RETURN OLD;
    # END;
    # $$ LANGUAGE plpgsql;

    # CREATE TRIGGER delete_streams_after_day_trigger
    # AFTER UPDATE OF start_time ON Streams
    # FOR EACH ROW
    # WHEN (NEW.start_time + INTERVAL '1 day' <= NOW())
    # EXECUTE FUNCTION delete_old_streams();
    # """)