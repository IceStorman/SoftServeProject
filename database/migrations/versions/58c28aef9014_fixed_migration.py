"""fixed_migration

Revision ID: 58c28aef9014
Revises: d64bb5d9a9e5
Create Date: 2025-01-21 22:08:52.268810

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '58c28aef9014'
down_revision: Union[str, None] = 'd64bb5d9a9e5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Statuses',
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.Column('status_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('status_id')
    )
    op.create_table('Streams_Status',
    sa.Column('streams_status_id', sa.Integer(), nullable=False),
    sa.Column('stream_id', sa.Integer(), nullable=True),
    sa.Column('status_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['status_id'], ['Statuses.status_id'], ),
    sa.ForeignKeyConstraint(['stream_id'], ['Streams.stream_id'], ),
    sa.PrimaryKeyConstraint('streams_status_id')
    )
    op.execute("""
    CREATE OR REPLACE FUNCTION set_initial_status()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO Streams_Status (stream_id, status_id)
        VALUES (NEW.stream_id, 0);
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    CREATE TRIGGER set_initial_status_trigger
    AFTER INSERT ON Streams
    FOR EACH ROW
    EXECUTE FUNCTION set_initial_status();
    """)

    op.execute("""
    CREATE OR REPLACE FUNCTION update_status_on_start()
    RETURNS TRIGGER AS $$
    BEGIN
        IF NEW.start_time <= EXTRACT(EPOCH FROM NOW()) AND
           (SELECT status_id FROM Streams_Status WHERE stream_id = NEW.stream_id ORDER BY status_id DESC LIMIT 1) = 0 THEN
            UPDATE Streams_Status
            SET status_id = 1
            WHERE stream_id = NEW.stream_id;
        END IF;
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    CREATE TRIGGER update_status_on_start_trigger
    AFTER UPDATE OF start_time ON Streams
    FOR EACH ROW
    EXECUTE FUNCTION update_status_on_start();
    """)

    op.execute("""
    CREATE OR REPLACE FUNCTION update_status_on_end()
    RETURNS TRIGGER AS $$
    BEGIN
        IF NEW.start_time + (90 * 60) <= EXTRACT(EPOCH FROM NOW()) AND
           (SELECT status_id FROM Streams_Status WHERE stream_id = NEW.stream_id ORDER BY status_id DESC LIMIT 1) = 1 THEN
            UPDATE Streams_Status
            SET status_id = 2
            WHERE stream_id = NEW.stream_id;
        END IF;
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    CREATE TRIGGER update_status_on_end_trigger
    AFTER UPDATE OF start_time ON Streams
    FOR EACH ROW
    EXECUTE FUNCTION update_status_on_end();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('Streams_Status')
    op.drop_table('Statuses')
    op.execute("DROP TRIGGER IF EXISTS set_initial_status_trigger ON Streams;")
    op.execute("DROP FUNCTION IF EXISTS set_initial_status;")
    
    op.execute("DROP TRIGGER IF EXISTS update_status_on_start_trigger ON Streams;")
    op.execute("DROP FUNCTION IF EXISTS update_status_on_start;")
    
    op.execute("DROP TRIGGER IF EXISTS update_status_on_end_trigger ON Streams;")
    op.execute("DROP FUNCTION IF EXISTS update_status_on_end;")
    # ### end Alembic commands ###
